
#include <WiFi.h>
#include <Wire.h>
#include <WebServer.h>
#include "RTClib.h"
#include <TM1637Display.h>

RTC_DS3231 rtc;

#define CLK 3
#define DIO 2
TM1637Display display(CLK, DIO);

struct cutie {
  bool stat_bec = 0;
  int ho = 0, mi = 0;
  int timp = 0;
} v[4];

// Wi-Fi
const char* ssid = "007";
const char* password = "lol :)";

WebServer server(80);   // server pe port 80
String logNumeric = "";

void addLog(int eventCode, int cutieId) {
  DateTime now = rtc.now();

  String newLogEntry = "";
  newLogEntry += String(cutieId);
  newLogEntry += String(eventCode);
  newLogEntry += (now.hour() < 10 ? "0" : "") + String(now.hour());
  newLogEntry += (now.minute() < 10 ? "0" : "") + String(now.minute());
  newLogEntry += String(now.year()).substring(2);
  newLogEntry += (now.month() < 10 ? "0" : "") + String(now.month());
  newLogEntry += (now.day() < 10 ? "0" : "") + String(now.day());

  logNumeric += newLogEntry;
  Serial.print("Log numeric adaugat: ");
  Serial.println(newLogEntry);
}

void handleSet() {
  if (server.hasArg("cutie") && server.hasArg("ora")) {
    int c = server.arg("cutie").toInt();
    int t = server.arg("ora").toInt();

    if (c >= 0 && c < 4) {
      v[c].timp = t;
      v[c].ho = t / 100;
      v[c].mi = t % 100;

      String responseMessage = "Setare reusita pentru cutia " + String(c) + " la ora " +
                               String(v[c].ho) + ":" + (v[c].mi < 10 ? "0" : "") + String(v[c].mi);
      server.send(200, "text/plain", responseMessage);
    } else {
      server.send(400, "text/plain", "Invalid pillbox number.");
    }
  } else {
    server.send(400, "text/plain", "Missing parameters.");
  }
}

void handleData() {
  server.send(200, "text/plain", logNumeric);
}

void setup() {
  Serial.begin(9600);
  delay(2000);

  WiFi.begin(ssid, password);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("\nConnected!");
  Serial.print("ESP32 IP: ");
  Serial.println(WiFi.localIP());

  server.on("/set", handleSet);
  server.on("/data", handleData);
  server.begin();
  Serial.println("Serverul HTTP a pornit.");

  Wire.begin();
  rtc.begin();
  display.setBrightness(7);

  if (rtc.lostPower() || rtc.now().year() < 2024) {
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
  }

  for (int i = 4; i <= 7; i++) pinMode(i, OUTPUT);
  for (int i = 8; i <= 11; i++) pinMode(i, INPUT_PULLUP);
}

void loop() {
  server.handleClient();

  DateTime now = rtc.now();
  int displayTime = now.hour() * 100 + now.minute();
  display.showNumberDecEx(displayTime, 0b11100000, true);

  for (int i = 0; i < 4; i++) {
    if (v[i].timp == displayTime) {
      digitalWrite(i + 4, HIGH);
      v[i].stat_bec = 1;
    }
    if (digitalRead(i + 8) == LOW) {
      if (v[i].stat_bec == 1) {
        v[i].stat_bec = 0;
        digitalWrite(i + 4, LOW);
        addLog(0, i);
      } else {
        for (int jx = 0; jx < 5; jx++) {
          digitalWrite(i + 4, LOW);
          delay(300);
          digitalWrite(i + 4, HIGH);
          delay(300);
        }
        v[i].stat_bec = 0;
        digitalWrite(i + 4, LOW);
        addLog(1, i);
      }
    }
  }
  delay(100);
}
